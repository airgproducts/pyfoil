from typing import List, Tuple

from typing import overload

class Result:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def aoa(self) -> float: ...
    @property
    def cd(self) -> float: ...
    @property
    def cdp(self) -> float: ...
    @property
    def cl(self) -> float: ...
    @property
    def cm(self) -> float: ...
    @property
    def converged(self) -> bool: ...
    @property
    def reynolds(self) -> float: ...
    @property
    def xtr_bottom(self) -> float: ...
    @property
    def xtr_top(self) -> float: ...

class Solver:
    ncrit: float
    viscous: bool
    xtr_bottom: float
    xtr_top: float
    def __init__(self) -> None: ...
    def load(self, arg0: List[Tuple[float,float]]) -> bool: ...
    @overload
    def run_aoa(self, arg0: float) -> Result: ...
    @overload
    def run_aoa(self, arg0: List[float]) -> List[Result]: ...
    def set_debug(self, arg0: bool) -> None: ...
